<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 配置spring注解扫描的包 -->
	<context:component-scan base-package="com.demo"></context:component-scan>
	<!-- 或者不用注解的形式加载bean,改用配置的方式 <bean id="springWebService" class="com.elgin.spring.webservice.SpringWebServiceDemo 
		"> 利用property可以对SpringService类进行初始化,比如<property name="name" value="姚明" /><property 
		name="job" value="职业男篮" />,在配置完SpringService类后，就可以直接在程序中FileSystemXmlApplicationContext类或其他类似功能的类读取applicationContext.xml文件中的内容，并获得SpringService类的对象实例。但现在我们并不这样做，而是将SpringService类发布成WebService。在Tomcat的webapps项目中的WEB-INF\lib目录中有一个axis2-spring-1.4.1.jar文件, 
		该文件用于将被装配JavaBean的发布成WebService。 -->
</beans> 