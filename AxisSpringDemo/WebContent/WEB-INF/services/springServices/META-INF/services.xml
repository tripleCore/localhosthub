<?xml version="1.0" encoding="UTF-8"?>
<serviceGroup>
	<service name="springService">
		<description>Web Service</description>
		<!-- SpringBeanName作用类似于普通配置中的ServiceClass，都是用来创建服务类对象，只不过普通配置使用反射来创建 加入Spring之后，对象的创建交给了Spring的IOC容器,SpringBeanName指定要发布成WebService的Java类在applicationContext.xml文件中装配, 
			SpringBeanName参数是JavaBean的名称。SpringBeanName固定的不能改 ,因为springWebService是spring中注册的实现类得id 
			如果不使用spring，可以使用ServiceClass属性,ServiceClass参数要指定要发布成WebService的Java类，并指定全类名的方式：com.elgin.spring.webservice.SpringWebServiceDemo -->
		<parameter name="SpringBeanName">springWebService</parameter>
		<!-- 通过ServiceObjectSupplier参数指定SpringServletContextObjectSupplier类来获得Spring的ApplicationContext对象 -->
		<parameter name="ServiceObjectSupplier">org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier
		</parameter>
		<!-- 在这里最值得注意的是<messageReceivers>元素，该元素用于设置处理WebService方法的处理器。 例如，getAge方法有一个返回值，因此，需要使用可处理输入输出的RPCMessageReceiver类， 
			而update方法没有返回值，因此，需要使用只能处理输入的RPCInOnlyMessageReceiver类。 -->
		<messageReceivers>
			<messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-out"
				class="org.apache.axis2.rpc.receivers.RPCMessageReceiver" />
			<messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only"
				class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver" />
		</messageReceivers>
	</service>
</serviceGroup>   